@model List<Branch>

@using NovoePokolenie.Helpers;
@inject NovoePokolenie.Services.GroupService _groupService;
@inject NovoePokolenie.Services.StudentService _studentService;

@{ 
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .branchContainer {
        grid-template-columns: repeat(@Model.Count, 1fr);
    }
</style>

<div class="branchContainer">
    @foreach (Branch branch in Model)
    {
        <div class="branchBlock">
            <div class="branchBlock-header">
                @branch.Name
                <a class="header-icon-link" href="@Url.Action("Create", "Group", new { branchId = branch.Id })">+</a>
            </div>
            @{
                List<Group> groups = await _groupService.GetGroupsByBranchIdAsync(branch.Id);
                groups.Sort((g1, g2) => StHel.CompareTimeTables(g1.TimeTable, g2.TimeTable));
            }
            @foreach (Group group in groups)
            {
                <a class="branchBlock-content branchBlock-closed" href="@Url.Action("Edit", "Group", new { id = group.Id })">
                    @StHel.TimeTableToShortString(group.TimeTable)
                    <br>
                    @(await _studentService.GetStudentMentorNameAsync(group.Id)) - @group.Users?.Count
                </a>
            }
        </div>
    }
</div>